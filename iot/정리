웹브라우저에서 사용자의 행위: 주소가 변경됨
-> Controller
-> Service
-> DAO
-> mapper


고객관리테이블의 pk인 id 컬럼에 적용할 시퀀스를
데이터행 insert시 자동적용되게 하기위한 트리거

create or replace trigger trg_customer
	before insert on customer
	for each row
begin
	select seq_customer.nextval into :new.id from dual;	
end;
/



공지글 관리

create table notice (
id          number /*시퀀스값이 담길 pk인 컬럼*/,
title       varchar2(300) not null /*제목*/,
content     varchar2(4000) not null /*내용*/,
writer      varchar2(50) not null /*작성자의 id*/,
writedate   date default sysdate /*작성일자*/,
constraint notice_id_pk primary key (id),
constraint notice_writer_fk foreign key(writer)
                                 references member(id) 
);

create sequence seq_notice
start with 1 increment by 1;


create or replace trigger trg_notice
	before insert on notice
	for each row
begin
	select seq_notice.nextval into :new.id from dual;
end;



프로젝트생성
Spring legacy project 
> project name: .. & Templates: Spring MVC Project 
> package 지정: com.hanul.web 와 같이 3개로 구성
> Finish

프로젝트 우클릭 > Project Facets > Dynamic web module: 3.0
                              java: 11
                                  
프로젝트 > pom.xml > java-version: 11
                   maven-compiler version: 11
				  springframework-version: 5.3.15



웹브라우저 사용자 행위: 주소창의 url이 변경됨 
> Controller: 변경된 url 요청에 대한 처리 - @Controller 지정
>             @RequestMapping 을 지정한 메소드 선언
>             메소드 내부: 비지니스 로직처리
>             화면에 출력할 데이터를 Model 타입에 attribute로 저장해둔다
>             응답할 화면명을 지정              
> Service(Command) : 비지니스 로직처리
              비지니스 로직처리에 DB관련처리
              
> DAO : DB관련처리 - 쿼리문실행
                      
    
화면에 데이터 전달 > 화면 연결
1. Model 사용하는 경우
  1) Model 타입의 파라미터를 메소드 파라미터로 선언
  2) 선언한 파라미터의 addAttribute 메소드로 데이터를 담는다
  3) 화면명으로 화면을 연결한다
2. ModelAndView 사용하는 경우
  1) ModelAndView 객체생성
  2) 생성한 객체의 addObject 메소드로 데이터를 담는다
  3) 생성한 객체의 setViewName 메소드로 연결할 화면명을 지정한다
  4) 생성한 객체를 반환한다
          

전송된 form의 데이터 사용을 위한 파라미터 접근방법
1. HttpServletRequest 객체 이용
2. @RequestParam 을 이용
	파라미터명과 Controller의 매핑된 메소드의 파라미터변수명을 같게 선언하면
	@RequestParam 을 생략해 데이터를 담을수 있다.
3. 데이터객체(VO/DTO)를 이용

경로의 형태로 데이터를 접근방법
4. @PathVariable 을 사용






				  